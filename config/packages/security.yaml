security:
#    role_hierarchy:
#        ROLE_POVERENIK: [ ROLE_USER ]
#        ROLE_REG_POVERENIK: [ ROLE_USER ]
#        ROLE_UPRAVNIK_CENTRALE: [ ROLE_USER ]
#        ROLE_UPRAVNIK_GRANE: [ ROLE_USER ]
#        ROLE_SUPER_ADMIN: [ ROLE_USER, ROLE_ALLOWED_TO_SWITCH ]
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            # by default, the feature allows 5 login attempts per minute
            login_throttling: null
            user_checker: App\Security\UserChecker

            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
#            custom_authenticator: App\Security\LoginAuthenticator

                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/login$, role: PUBLIC_ACCESS }
#        - { path: ^/$, roles: ROLE_USER }
#            - { path: ^/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#            - { path: ^/password-send, role: IS_AUTHENTICATED_ANONYMOUSLY }
#            - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
