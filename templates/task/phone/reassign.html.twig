{% extends 'layout.html.twig' %}

{% block content %}
    {{ render(controller('App\\Controller\\WidgetController::header' )) }}
    <div class="page-content">
        {{ render(controller('App\\Controller\\WidgetController::adminMainSidebar', { '_route': app.request.attributes.get('_route') })) }}

        <!-- Main content -->
        <div class="content-wrapper">

            <!-- Inner content -->
            <div class="content-inner">

                <!-- Page header -->
                <div class="page-header mobile-padding-sm page-header-light shadow">
                    <div class="page-header-content d-lg-flex">
                        <div class="d-flex">
                            <h4 class="page-title mb-0">
                                #{{ task.id }}: {{task.title }}
                            </h4>
                        </div>
                    </div>
                </div>

                <!-- /page header -->

                <!-- Content area -->
                <div class="content">
                    <!-- Wizard with validation -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                Izmena zaposlenih
                            </h6>
                        </div>
{#                        <form name="task_quick_form" method="post" action="{{ path('app_task_reassign', {id:task.id}) }}" class="form-validate-jquery" novalidation="novalidation" enctype="multipart/form-data" id="task_form">#}
                        {{ form_start(form, {'attr': {'class' : 'form-validate-jquery', 'novalidation': 'novalidation', 'enctype': 'multipart/form-data', 'id': 'task_form' , 'data-bs-target' : 'f2'}}) }}
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="mb-3">
                                            {{ form_label(form.assignedUsers, 'Zaposleni:*', {'label_attr': {'class': 'form-label'}}) }}
                                            {{ form_widget(form.assignedUsers, {attr: { class: 'form-control required' }}) }}
                                            <span class="form-text">Morate dodati najmanje jednog zaposlenog sa liste kome dodeljujete zadatak.</span>
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <div class="mb-3">
                                            <div class="mb-1">
                                                <label class="form-label" for="reassign_task_form_primary">Primarni dnevnik:*</label>
                                                <select id="reassign_task_form_primary" name="reassign_task_form[priorityUserLog]" class="form-control required" required>
                                                    <option value="">--Izaberite primarni dnevnik--</option>
                                                    {% for user in users %}
                                                        <option value="{{ user.id }}">{{ user.getNameForForm() }}</option>
                                                    {% endfor %}
                                                </select>
                                            </div>
                                            <span class="form-text">Birate po 훾ijem dnevniku se bele탑i zadatak u bazu.</span>
                                        </div>
                                    </div>
                                </div>
                                {% if isCar %}
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <div class="mb-3">
                                                <div class="mb-1">
                                                    <label class="form-label" for="task_form_car">Vozilo:</label>
                                                    <select id="task_form_car" name="task_form[car]" class="form-control">
                                                        <option value="">--Izaberite vozilo--</option>
                                                        {% for car in cars %}
                                                            {% if task.car == car.id %}
                                                                <option value="{{ car.id }}" selected>{{ car.carName() }}</option>
                                                            {% else %}
                                                                <option value="{{ car.id }}">{{ car.carName() }}</option>
                                                            {% endif %}
                                                        {% endfor %}
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="mb-3">
                                                <div class="mb-1">
                                                    <label class="form-label" for="task_form_driver">Voza훾:</label>
                                                    <select id="task_form_driver" name="task_form[driver]" class="form-control " >
                                                        <option value="">--Izaberite voza훾a--</option>
                                                        {% for user in users %}
                                                            {% if task.driver == user.id %}
                                                                <option value="{{ user.id }}" selected>{{ user.fullName }}</option>
                                                            {% else %}
                                                                <option value="{{ user.id }}">{{ user.fullName }}</option>
                                                            {% endif %}
                                                        {% endfor %}
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}

                                <div class="text-end">
                                <button type="submit" class="btn btn-primary"><i class="ph-floppy-disk"></i></button>
                            </div>
                            </div>
                        {{ form_end(form) }}

                    </div>
                    <!-- /wizard with validation -->

                </div>
                <!-- /content area -->

                <!-- Footer -->
                {% include 'includes/footer.html.twig' %}
                <!-- /footer -->

            </div>
            <!-- /inner content -->

        </div>
        <!-- /main content -->


    </div>
    {% include 'includes/notification.html.twig' %}
{% endblock content %}

{% block includeJavascript %}
    {{ parent() }}

    <script src="{{ asset('assets/js/jquery/jquery.min.js') }}"></script>
    <script src="{{ asset('assets/js/vendor/forms/wizards/steps.min.js') }}"></script>
    <script src="{{ asset('assets/js/vendor/forms/validation/validate.min.js') }}"></script>

    <script src="{{ asset('assets/demo/pages/form_wizard.js') }}"></script>

    <script src="{{ asset('assets/js/vendor/ui/moment/moment.min.js') }}"></script>
    <script src="{{ asset('assets/js/vendor/pickers/daterangepicker.js') }}"></script>
    <script src="{{ asset('assets/js/vendor/pickers/datepicker.min.js') }}"></script>
    <script src="{{ asset('assets/demo/pages/picker_date.js') }}"></script>
    <script src="{{ asset('assets/js/vendor/pickers/sr-latn.js') }}"></script>

    <script src="{{ asset('assets/js/vendor/forms/selects/select2.min.js') }}"></script>
    <script src="{{ asset('assets/demo/pages/form_select2.js') }}"></script>

    <script src="{{ asset('assets/js/vendor/forms/inputs/imask.min.js')}}"></script>
    <script src="{{ asset('assets/js/vendor/forms/inputs/autosize.min.js')}}"></script>
    <script src="{{ asset('assets/js/vendor/forms/inputs/passy.js')}}"></script>
    <script src="{{ asset('assets/js/vendor/forms/inputs/maxlength.min.js')}}"></script>
    <script src="{{ asset('assets/demo/pages/form_controls_extended.js')}}"></script>

    <script src="{{ asset('assets/js/vendor/uploaders/fileinput/fileinput.min.js')}}"></script>
    <script src="{{ asset('assets/js/vendor/uploaders/fileinput/plugins/sortable.min.js')}}"></script>
    <script src="{{ asset('assets/demo/pages/uploader_bootstrap.js')}}"></script>

    <script src="{{ asset('assets/js/vendor/uploaders/fileinput/sr-latin.js')}}"></script>
    <script src="{{ asset('assets/demo/pages/form_validation_library.js') }}"></script>

    {% if app.request.locale == 'sr-RS' %}
        <script type="text/javascript" src="{{ asset('assets/js/vendor/forms/validation/localization/messages_sr_lat.js') }}"></script>
    {% endif %}

{% endblock includeJavascript %}

{% block footerJavascript %}

{#    <script>#}
{#        $(document).ready(function() {#}
{#            // Funkcija za proveru da li je geodeta selektovan u bilo kom polju "Geodeta"#}
{#            function isGeodetaSelected(userId) {#}
{#                var geo1 = $('#task_form_geo1').val();#}
{#                var geo2 = $('#task_form_geo2').val();#}
{#                var geo3 = $('#task_form_geo3').val();#}
{#                return geo1 == userId || geo2 == userId || geo3 == userId;#}
{#            }#}

{#            function updateDriversOptions() {#}
{#                var selectedGeodete1Ids = $('#task_form_geo1').val() || [];#}
{#                var selectedGeodete2Ids = $('#task_form_geo2').val() || [];#}
{#                var selectedGeodete3Ids = $('#task_form_geo3').val() || [];#}

{#                // Spajamo vrednosti iz svih polja "Geodeta" kako bismo dobili izbor za polje "Voza훾"#}
{#                var selectedGeodeteIds = selectedGeodete1Ids.concat(selectedGeodete2Ids, selectedGeodete3Ids);#}

{#                // Omogu훶avamo sve opcije u polju "Voza훾"#}
{#                $('#task_form_driver option').prop('disabled', false);#}

{#                // Onemogu훶avamo opcije koje nisu izabrane u poljima "Geodeta"#}
{#                $('#task_form_driver option').each(function() {#}
{#                    var driverId = $(this).val();#}
{#                    if (selectedGeodeteIds.indexOf(driverId) === -1) {#}
{#                        $(this).prop('disabled', true);#}
{#                    }#}
{#                });#}

{#                // Resetujemo izbor u polju "Voza훾" ako izabrani voza훾 vi큄e nije dostupan#}
{#                var selectedDriverId = $('#task_form_driver').val();#}
{#                if (selectedDriverId && selectedGeodeteIds.indexOf(selectedDriverId) === -1) {#}
{#                    $('#task_form_driver').val('');#}
{#                }#}

{#            }#}

{#            $('#task_form_geo1').change(function() {#}
{#                // Resetujemo selekt u polju "Voza훾" kada se promeni izbor u polju "#task_form_geo1"#}
{#                var selectedValue = $(this).val();#}
{#                $('#task_form_driver').val(selectedValue);#}

{#                var selectedDriverText = $('#task_form_driver option:selected').text();#}
{#                $('#task_form_driver').siblings('.select2-container').find('.select2-selection__rendered').text(selectedDriverText);#}
{#                // Omogu훶imo sve opcije u poljima "Geodeta" pre nego 큄to izvr큄imo promene#}
{#                $('#task_form_geo1, #task_form_geo2, #task_form_geo3').find('option').prop('disabled', false);#}

{#                // Azuriramo opcije za sva polja osim trenutno izabranog#}
{#                updateGeodeteOptions();#}

{#                // A탑uriramo opcije u polju "Voza훾" na osnovu novih izbora u poljima "Geodeta"#}
{#                updateDriversOptions();#}
{#            });#}
{#            $('#task_form_driver').change(function() {#}
{#                // A탑uriramo opcije u polju "Voza훾" na osnovu izbora u poljima "Geodeta"#}
{#                updateDriversOptions();#}

{#                // A탑uriramo vidljivi tekst u polju "Voza훾" na osnovu izbora#}
{#                var selectedDriverText = $('#task_form_driver option:selected').text();#}
{#                $('#task_form_driver').siblings('.select2-container').find('.select2-selection__rendered').text(selectedDriverText);#}
{#            });#}

{#            function updateGeodeteOptions() {#}
{#                    $('#task_form_geo1, #task_form_geo2, #task_form_geo3').each(function() {#}
{#                        var currentId = $(this).attr('id');#}
{#                        var selectedValue = $(this).val();#}

{#                        // Omogu훶imo sve opcije u trenutnom polju "Geodeta"#}
{#                        $(this).find('option').prop('disabled', false);#}

{#                        // Onemogu훶imo izabrane vrednosti u drugim poljima "Geodeta"#}
{#                        $('#task_form_geo1, #task_form_geo2, #task_form_geo3').not(this).each(function() {#}
{#                            var otherSelectedValue = $(this).val();#}
{#                            if (otherSelectedValue) {#}
{#                                $('#' + currentId + ' option[value="' + otherSelectedValue + '"]').prop('disabled', true);#}
{#                            }#}
{#                        });#}
{#                    });#}
{#                }#}

{#            // Postavljanje event listenera na sva polja "Geodeta" kako bismo pratili promene u izboru#}
{#            $('#task_form_geo1, #task_form_geo2, #task_form_geo3').change(function() {#}
{#                updateGeodeteOptions();#}
{#            });#}

{#            // Postavljanje event listenera na polje "Voza훾" kako bismo pratili promene u izboru#}
{#            $('#task_form_geo1, #task_form_geo2, #task_form_geo3').change(function() {#}
{#                // A탑uriramo opcije u polju "Voza훾" na osnovu izbora u poljima "Geodeta"#}
{#                updateDriversOptions();#}
{#            });#}

{#            // Pozivamo funkciju za inicijalno postavljanje opcija u poljima "Geodeta" prilikom u훾itavanja stranice#}
{#            updateGeodeteOptions();#}

{#            // Pozivamo funkciju za inicijalno postavljanje opcija u polju "Voza훾" prilikom u훾itavanja stranice#}
{#            updateDriversOptions();#}
{#        });#}
{#    </script>#}
    <script>
        $(document).ready(function () {

            $("#reassign_task_form_assignedUsers").change(function () {
                updatePrimarySelectOptions();
                updateDriverSelectOptions();
            });

            updatePrimarySelectOptions();
            updateDriverSelectOptions();

            function updatePrimarySelectOptions() {
                // Dobijamo selektovane opcije iz prvog select elementa
                var selectedOptions = $("#reassign_task_form_assignedUsers option:selected");

                // Resetujemo opcije u drugom select elementu
                $("#reassign_task_form_primary").empty();

                // Ako nijedna opcija nije izabrana, onemogu훶ujemo drugi select element i selektujemo opciju "--Izaberite primarni dnevnik--"
                if (selectedOptions.length === 0) {
                    $("#reassign_task_form_primary").append('<option value="">--Izaberite primarni dnevnik--</option>');
                    $("#reassign_task_form_primary").prop("disabled", true);
                } else {
                    // Ako je bar jedna opcija izabrana, omogu훶ujemo drugi select element i dodajemo selektovane opcije iz prvog select elementa
                    selectedOptions.each(function () {
                        var optionValue = $(this).val();
                        var optionText = $(this).text();
                        $("#reassign_task_form_primary").append('<option value="' + optionValue + '">' + optionText + '</option>');
                    });
                    $("#reassign_task_form_primary").prop("disabled", false);
                }
            }
            function updateDriverSelectOptions() {
                // Dobijamo selektovane opcije iz prvog select elementa
                var selectedAssignedUsers = $("#reassign_task_form_assignedUsers option:selected");
                var selectedCar = $("#task_form_car option:selected");

                // Dobijamo trenutno izabranog voza훾a ako postoji
                var taskDriverSelect = $("#task_form_driver");
                var selectedDriver = taskDriverSelect.val();

                // Resetujemo opcije u drugom select elementu
                taskDriverSelect.empty();

                // Proveravamo da li su izabrani Zaposleni korisnici i vozilo
                if (selectedAssignedUsers.length > 0 && selectedCar.val() !== "") {
                    // Ako su izabrani Zaposleni korisnici i vozilo, omogu훶ujemo drugi select element i dodajemo opcije za voza훾e
                    selectedAssignedUsers.each(function () {
                        var optionValue = $(this).val();
                        var optionText = $(this).text();
                        taskDriverSelect.append('<option value="' + optionValue + '">' + optionText + '</option>');
                    });
                    taskDriverSelect.prop("disabled", false);

                    // Postavljamo voza훾a kao obavezno polje i menjamo labelu
                    taskDriverSelect.prop('required', true);
                    $('label[for="task_form_driver"]').text('Voza훾:*');

                    // Proveravamo da li je prethodno izabrani voza훾 i dalje dostupan, i postavljamo ga ako jeste
                    if (selectedDriver && taskDriverSelect.find('option[value="' + selectedDriver + '"]').length > 0) {
                        taskDriverSelect.val(selectedDriver);
                    }
                } else {
                    // Ako nisu izabrani Zaposleni korisnici ili vozilo, onemogu훶ujemo drugi select element, postavljamo opciju "--Izaberite voza훾a--" i vra훶amo polje na neobavezno
                    taskDriverSelect.append('<option value="">--Izaberite voza훾a--</option>');
                    taskDriverSelect.prop("disabled", true);
                    taskDriverSelect.prop('required', false);
                    $('label[for="task_form_driver"]').text('Voza훾:');

                    // Resetujemo prethodno izabranog voza훾a
                    taskDriverSelect.val("");
                }
            }

            $('#task_form_car').change(function(){
                if($(this).val() !== '') {
                    $('#task_form_driver').prop('required', true).prop('disabled', false); // Ako je vozilo izabrano, postavi voza훾a kao obavezno polje i omogu훶i ga
                    updateDriverSelectOptions();
                    $('label[for="task_form_driver"]').text('Voza훾:*'); // Promeni labelu za voza훾a
                } else {
                    $('#task_form_driver').prop('required', false).prop('disabled', true); // Ako nije izabrano vozilo, voza훾 nije obavezno polje i onemogu훶i ga
                    updateDriverSelectOptions();
                    $('label[for="task_form_driver"]').text('Voza훾:'); // Vrati labelu na osnovnu vrednost
                }
            });

        });

    </script>
{% endblock footerJavascript %}